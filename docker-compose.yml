 # Define todos los servicios (contenedores) que componen la aplicaci√≥n
services:
    # Nombre del servicio para el frontend
  
    back:
        build: .
        command: sh -c "npm install --legacy-peer-deps && npm run dev"
        ports:
            - "${PORT}:${PORT}"
        volumes:
            - .:/app
            - /app/node_modules
        env_file:
            - .env
        environment:
            - PORT=${PORT}
            - NODE_ENV=development
        depends_on:
            - mongo
            - postgres

    mongo:
    # definir la ultima version de mongo desde dockerhub
        image: mongo:latest
        #nombre del contenedor (opcional)
        container_name: mongo
        env_file:
            - .env
        ports:
            - "${PORT_MONGODB}:${PORT_MONGODB}"
        volumes:
            - mongodb_data_invoices_app:/data/db
        environment:
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}

    postgres:
        image: postgres
        container_name: postgres
        env_file:
            - .env
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
        ports:
            - "${POSTGRES_PORT}:${POSTGRES_PORT}"
        volumes: 
            - postgres_data_invoices_app:/var/lib/postgresql/data
    redis:
        image: redis
        env_file:
            - .env
        container_name: redis
        ports:
            - "${REDIS_PORT}:${REDIS_PORT}"
        volumes:
            - redis_data_invoices_app:/data

 

volumes:
    mongodb_data_invoices_app:
    postgres_data_invoices_app:
    redis_data_invoices_app:
